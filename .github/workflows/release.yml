name: Release Foundry Module

on:
  push:
    branches:
      - main
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      tag:
        description: "Existing release tag (e.g., v1.0.0)"
        required: true

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine release tag
        id: release
        run: |
          EVENT="${{ github.event_name }}"

          if [ "$EVENT" = "workflow_dispatch" ]; then
            tag="${{ github.event.inputs.tag }}"
            if [ -z "$tag" ]; then
              echo "A tag input is required when triggering manually." >&2
              exit 1
            fi
            version="${tag#v}"
          elif [ "$EVENT" = "release" ]; then
            tag="${{ github.event.release.tag_name }}"
            version="${tag#v}"
          else
            version=$(jq -r '.version' module.json)
            if [ -z "$version" ] || [ "$version" = "null" ]; then
              echo "Unable to determine version from module.json" >&2
              exit 1
            fi
            if [[ "$version" == v* ]]; then
              tag="$version"
              version="${version#v}"
            else
              tag="v$version"
            fi

            git fetch --tags --quiet
            if git rev-parse -q --verify "refs/tags/$tag" >/dev/null 2>&1 || git ls-remote --tags origin "$tag" | grep -q "$tag"; then
              echo "Tag $tag already exists. Bump the module.json version before merging to main." >&2
              exit 1
            fi
          fi

          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Checkout release ref
        if: github.event_name != 'push'
        run: |
          git checkout "${{ steps.release.outputs.tag }}"

      - name: Ensure GitHub release exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ steps.release.outputs.tag }}"
          VERSION="${{ steps.release.outputs.version }}"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists"
          else
            TITLE="D&D Combat AI $VERSION"
            gh release create "$TAG" --title "$TITLE" --notes "Automated release for version $VERSION."
          fi

      - name: Validate manifest version matches tag
        run: |
          TAG="${{ steps.release.outputs.tag }}"
          VERSION=$(jq -r '.version' module.json)
          if [ "$TAG" != "v$VERSION" ] && [ "$TAG" != "$VERSION" ]; then
            echo "Release tag $TAG does not match module.json version $VERSION" >&2
            exit 1
          fi

      - name: Prepare distribution folder
        run: |
          rm -rf dist
          mkdir -p dist
          zip -r dist/module.zip \
            module.json \
            scripts \
            styles \
            lang \
            README.md \
            LICENSE \
            CHANGELOG.md \
            INSTALL.md \
            EXAMPLES.md \
            -x '**/.git*' '**/__pycache__*'
          cp module.json dist/module.json

      - name: Publish release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${{ steps.release.outputs.tag }}" \
            "dist/module.zip" \
            "dist/module.json#module.json" \
            --clobber
